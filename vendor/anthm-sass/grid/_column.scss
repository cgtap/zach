
// Private Variables
// -----------------

$_grid-columns:       map-get($grid-settings, columns);
$_grid-column-width:  map-get($grid-settings, column-width);
$_grid-gutter:        map-get($grid-settings, gutter);
$_grid-width:         map-get($grid-settings, width);


// Public Mixins
// -------------

@mixin grid-column($columns:$_grid-columns, $totalColumns: $_grid-columns, $behavior: false) {
  @include column();
  display: block;

  @if $behavior == table {
    display:  table-cell;
    width:    percentage($columns / $totalColumns);
  }
  @else {
    @if $behavior == collapse {
      @include collapse-column();
      width: getGridColumnsWidth($columns, $totalColumns) + getGridGutterWidth($totalColumns);

      &:last-child {
        width: getGridColumnsWidth($columns, $totalColumns);
      }

      @include breakpoint(tiny) {
        float: left;
        width: 100%;
      }
    }
    @else {
      margin-right: getGridGutterWidth($totalColumns);
      width:        getGridColumnsWidth($columns, $totalColumns);

      &:last-child {
        margin-right: 0;
      }

      @include breakpoint(tiny) {
        float: left;
        margin-right: 0;
        width: 100%;
      }
    }
  }
}

@mixin grid-push($columns:$_grid-columns, $totalColumns: $_grid-columns, $behavior: false) {
  @if $behavior == collapse {
    margin-left: getGridColumnsWidth($columns, $totalColumns) + getGridGutterWidth($totalColumns);
  }
  @else {
    margin-left: getGridColumnsWidth($columns, $totalColumns);
  }
}

@mixin grid-equal-column-container($columns:$_grid-columns) {
  @include grid-row(table);

  > *:first-child:nth-last-child(1) {
    @include grid-column(12, 12, table);
  }

  > *:first-child:nth-last-child(2),
  > *:first-child:nth-last-child(2) ~ * {
    @include grid-column(6, 12, table);
  }

  > *:first-child:nth-last-child(3),
  > *:first-child:nth-last-child(3) ~ * {
    @include grid-column(4, 12, table);
  }

  > *:first-child:nth-last-child(4),
  > *:first-child:nth-last-child(4) ~ * {
    @include grid-column(3, 12, table);
  }

  > *:first-child:nth-last-child(5),
  > *:first-child:nth-last-child(5) ~ * {
    @include grid-column(2.4, 12, table);
  }

  > *:first-child:nth-last-child(6),
  > *:first-child:nth-last-child(6) ~ * {
    @include grid-column(2, 12, table);
  }
}


// Private Functions
// -----------------

@function getGridColumnsWidth($columns, $grid-columns: $_grid-columns) {
  $column-width:    $columns * $_grid-column-width + ($columns - 1) * $_grid-gutter;
  $container-width: $grid-columns * $_grid-column-width + ($grid-columns - 1) * $_grid-gutter;

  @return percentage($column-width / $container-width);
}

@function getGridGutterWidth($grid-columns: $_grid-columns) {
  $container-width: $grid-columns * $_grid-column-width + ($grid-columns - 1) * $_grid-gutter;

  @return percentage($_grid-gutter / $container-width);
}

@function getGridPercentage($value, $grid-columns: $_grid-columns) {
  $container-width: $grid-columns * $_grid-column-width + ($grid-columns - 1) * $_grid-gutter;

  @return percentage($value / $container-width);
}


// Mixins
// ------

@mixin column() {
  float:  left;
  display: block;
  min-height: 1px;
  position: relative;
}

@mixin collapse-column() {
  margin-right: 0 !important;
}
